主要记住两个函数
read_csv(filename(string),head=None,names=list)
这里记住一点可以把names的元素指定为index，这样我们就可以得到自定义的行索引
而不是默认的行索引
read_csv(filename(string),names=list,index_col=list[i])
另外一个函数是read_table(filename,sep=',')
等等即可
这两个函数都是pandas的函数，另外调用read_table的时候，注意sep可以是正则式
read_csv(filename,skiprows=list)这个函数可以跳过文件中的几行
read_csv(filename,na_values=[])表示把na_values中的元素作为NAN值
read_csv(filename,na_values={})表示把na_values中的对应键的值作为NA值
read_csv(filename,nrows=int)表示只读出filename中的几行而已，不全部读出来
read_csv(filename,chunksize=int)表示逐块读出其中的值，这样我们就得循环取出其中的值了，
DataFrame.to_csv(filename,sep='',na_rep='',index=bool,header=bool,cols=[])
把DataFrame的数据保存到文件中，其中各个属性都应当不难
Series.to_csv(filename)
另外Series.from_csv(filename)将把文件中的数据还原为Series
可以通过定义一个父类是csv.Dialect的子类来定义自己的csv文件类
另外csv可以通过调用csv.writer(filehandle,dialect=my_dialect)来定义自己的写文件器，通过得到的写文件器调用writerow(())来写数据
--------------------------------------------------------------------------------Json是另外一种文件解析方式
这里不细说，主要是记住json.load(string)来载入数据
json.dump(jsonobject)来转化为json格式
另外关于其它各种形式的数据获取和解析，可以参考书籍《利用Python进行数据分析》中的第六种结尾部分，因为太杂乱，所以这里略过了

