pandas主要包括两个数据种类，一个就是Series，另一个是DataFrame
首先讲解Series，创建一个Series非常简单，直接通过
Series(list）即可，如果不指定索引，那么就会以0开始
series.values返回其值，返回类型为arrray，而series.index返回它的索引
也可以直接在构造函数中Series(list,index=list)来创造索引
而访问其中的元素直接和list一样，例如
obj2=Series([4,7,-5,3],index=['d','b','a','c'])
obj2['a']
obj2[['c','a','d']]等，同样Series同样可以使用布尔运算，算数运算，函数运算，但都只作用于值上，接着上面，
obj2[obj2>0]
obj2*2
np.exp(obj2)
等等
还可以把Series看成一个字典，查找一个键是否在其中
'b' in obj2
Series还有一个方便的构造函数，通过字典直接生成Series
Series(dict）
另外还有一个方法，Series(dict,index=list)来指定index，如果index对应的dict没有值，就会变为NA，通过pandas.isnull(series),pandas.notnull(series)可以查询相关值情况，同样的Series.isnull()也可以判断，两个Series的相加是同样键的值相加，Series还有一个name属性，它的索引也有name属性，另外Series的index可以通过赋值直接修改
Series.index=list就可以了，以上基本就是Series的内容了
----------------------------------------------------------------------------
DataFrame可以看作是一个表格，创建一个DataFrame很容易，直接调用构造函数就可以了
DataFrame（dict）,其中dict的键作为列索引，而行索引直接通过0-N来作为。实际上DataFrame的完全构造函数是通过
DataFrame(dict,columns=list,index=[])来生成的，如果没有相关的索引，则制定为NAN
通过DataFrame的列我们可以获得一个series，不过它的name却被指定了，
然而要通过制定行来获取一个series，则必须使用函数Dataframe.ix[indexvalue],这些都不难理解，可以对DataFrame的列直接赋值，但是注意长度要一致，另外如果用Series赋值时候，则相关的index会填上一个值，但是没有index则不会填上一个值(即NAN)，为不存在的列赋值会增加一个列，用del可以删除一列
另外注意通过索引方式的返回列值都是原DataFrame的视图，
另外还有一个DataFrame的嵌套字典构造函数
这样就会是外层字典键作为列，内层字典键作为行索引
同样的DataFrame.T返回转置，对于Series只需要类比即可
自然同Series，可以指定DataFrame的index和column的name属性
DataFrame.values返回值，不包括键。返回类型是array
Index对象不可修改
通过series.reindex(list)重新排列index，对于没有的键就添加NAN，另外fill_value
可以制定默认缺省值，method指定如何填充，而对于DataFrame而言，不仅可以改变index还可以改变column，只要指定DataFrame.reindex(columns=list)即可
eries和DataFrame上面的值，只需要使用drop函数即可
Series.drop(index)
DataFrame.drop([index][column],axis=int)即可，
Series的选取不仅可以通过int索引，还可以通过index
不过对于切片，其中不同的一点就是通过标签最后的末端是包含的
DataFrame也可以类似获取
另外DataFrame的DataFrame.ix[]功能相当复杂，这里就不细说了，
两者都支持+运算，不同在于DataFrame是在行和列上均进行的
DataFrame.add(DataFrame,fill_value=0)
DataFrame和serise直接也可以加减，这里大同小异，就不多说了
DataFrame.apply(function,axis=[0][1])这里就是对DataFrame的每行或每列运行方法函数
这里是对于DataFrame的行或者列而言，而对于元素级别则只能使用DataFrame.applymap(function)
而对于Series则有使用的方法为Series.map(function)
Series.sort_index()将对索引还有值排序
DataFrame.sort_index(axis=[0|1])
Series.order()对元素排序
DataFrame.sort_index(by='column')按照某列来排序
DataFrame.sort_index(by=list) 按照多个列来排序
DataFrame和Series都有rank方法，但是意思不明确，等用的时候来查吧
Series和DataFrame都可以有重复索引，
Series.index.is_unique可以判断索引是否唯一
series直接按照普通方式，而DataFrame通过DataFrame.ix[]即可
DataFrame.sum(axis=[0|1])来求和
DataFrame.idxmax()
DataFrame.cumsum()
DataFrame.describe() 返回多种方法的返回对象
Series.describe()也可以返回多种方法的返回对象
Serise.unique()返回去掉所有去掉重复值后的Series
Series.value_counts返回各种元素的重复次数
pandas.value_counts(Series.values,sort=bool)可以同样完成该功能
Series.isin(list)返回Series的值是否在list中
DataFrame.apply(pd.values_counts).fillna(int)这个函数运行时候，列索引不变，但是行索引变成了它的value，然后就是每个元素相应列的多少，最后没有的填充值
Series.dropna()去掉所有的NA值
Series.notnull()返回相关的非na布尔数组
DataFrame.dropna()去掉任何有na的行
DataFrame.dropna（how='all')丢掉所有为na的行
DataFrame.fillna(int)会填充na值
DataFrame.fillna(dict)对不同列添加缺省值
DataFrame.fillna(int,inplace=True)则会对现有DataFrame现场修改
DataFame允许有多重索引，只要在构造函数中传入index=[list]就可以了
这个时候返回的index是元组形式的索引
多重索引就是通过DataFrame[index1,index2]来获取元素
DataFrame.unstack()返回一个DataFrame,行为一个索引，列为另一个索引
而stack()就是unstack的逆运算
DataFrame.sortlevel()则对不同的key来排序
DataFrame.swaplevel(key1,key2)则交换key1，key2
的优先级
另外DataFrame.set_index(list)会把相关的列索引改为行索引，这方面不好叙述，不过都是参数的使用，和DataFrame的特殊情况，reset_index是逆运算
Series的索引如果是int就不要用负数，这会导致歧义，对于其它索引则倒不会，如果想通过行来取，有如下函数Series.iget_value()或者
DataFrame.irow(),icol()方法

