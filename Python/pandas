pandas主要包括两个数据种类，一个就是Series，另一个是DataFrame
首先讲解Series，创建一个Series非常简单，直接通过
Series(list）即可，如果不指定索引，那么就会以0开始
series.values返回其值，返回类型为arrray，而series.index返回它的索引
也可以直接在构造函数中Series(list,index=list)来创造索引
而访问其中的元素直接和list一样，例如
obj2=Series([4,7,-5,3],index=['d','b','a','c'])
obj2['a']
obj2[['c','a','d']]等，同样Series同样可以使用布尔运算，算数运算，函数运算，但都只作用于值上，接着上面，
obj2[obj2>0]
obj2*2
np.exp(obj2)
等等
还可以把Series看成一个字典，查找一个键是否在其中
'b' in obj2
Series还有一个方便的构造函数，通过字典直接生成Series
Series(dict）
另外还有一个方法，Series(dict,index=list)来指定index，如果index对应的dict没有值，就会变为NA，通过pandas.isnull(series),pandas.notnull(series)可以查询相关值情况，同样的Series.isnull()也可以判断，两个Series的相加是同样键的值相加，Series还有一个name属性，它的索引也有name属性，另外Series的index可以通过赋值直接修改
Series.index=list就可以了，以上基本就是Series的内容了
----------------------------------------------------------------------------
DataFrame可以看作是一个表格，创建一个DataFrame很容易，直接调用构造函数就可以了
DataFrame（dict）,其中dict的键作为列索引，而行索引直接通过0-N来作为。实际上DataFrame的完全构造函数是通过
DataFrame(dict,columns=list,index=[])来生成的，如果没有相关的索引，则制定为NAN
通过DataFrame的列我们可以获得一个series，不过它的name却被指定了，
然而要通过制定行来获取一个series，则必须使用函数Dataframe.ix[indexvalue],这些都不难理解，可以对DataFrame的列直接赋值，但是注意长度要一致，另外如果用Series赋值时候，则相关的index会填上一个值，但是没有index则不会填上一个值(即NAN)，为不存在的列赋值会增加一个列，用del可以删除一列
另外注意通过索引方式的返回列值都是原DataFrame的视图，
另外还有一个DataFrame的嵌套字典构造函数
这样就会是外层字典键作为列，内层字典键作为行索引
同样的DataFrame.T返回转置，对于Series只需要类比即可
自然同Series，可以指定DataFrame的index和column的name属性
DataFrame.values返回值，不包括键。返回类型是array
Index对象不可修改
通过series.reindex(list)重新排列index，对于没有的键就添加NAN，另外fill_value
可以制定默认缺省值，method指定如何填充，而对于DataFrame而言，不仅可以改变index还可以改变column，只要指定DataFrame.reindex(columns=list)即可

