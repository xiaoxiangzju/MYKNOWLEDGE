这里有关于OpenCL的地址空间的相关信息，首先地址空间我们把它们归结为修饰符，地址空间修饰符有Global，local，constant，private这几种，分别为全局变量，局部变量，常量变量，私有变量，最后还有一个为命名通用变量，其实就是全局变量，局部变量，私有变量的统称，这里我们得注意一下变量本身的属性和变量指向空间的属性
程序中的函数参数，或者函数中缺省地址修饰符的局部变量，它们的属性为private，另外函数参数一定在私有地址空间，在程序范围内的一个变量，或者程序内的一个static变量它们在全局或者常量地址空间，如果将一个指针声明为不指向任一命名地址空间，那么该指针指向通用地址空间，在访问一个指针所指向区域的内容前，该指针必须关联一个命名地址空间，如果函数参数（普通函数）的指针变量与指针类型的返回值没有声明地址空间，那么这些参数和返回值指向通用地址空间，另外，注意一点你，内核参数声明的指针类型必须指向global，local，constant三种类型之一。

下面细说这几种地址空间
1 全局地址空间：全局地址空间用来指示从全局存储器中分配的储存器对象，包括缓冲区和图像，一个缓冲区对象在内核参数中声明为指针，可以指向标量、矢量和自定义结构体，内核可以读写缓冲区任何位置，一般在全局地址空间分配图像对象，但全局地址修饰符不能用于图像类型，对图像不能直接读写，需要通过内置函数读写。
程序范围内定义的变量和函数内定义的静态变量可以声明在全局地址空间，在全局地址空间内的变量有整个程序的生命周期，它们的存储器空间一直保持，但是这些变量不能跨设备，不同的设备全局地址空间在不同的存储空间，在程序范围内的全局地址空间的变量或静态变量可以初始化。

2局部地址空间：局部地址空间用来存放在局部存储器中的变量，这些变量被一个工作组中的所有工作项共享，局部地址空间的指针可以作为函数的参数和函数内声明的变量，内核函数中声明的变量可以在局部地址空间中分配，但是有限制，这些变量声明必须出现在内核函数作用域，这些变量不能初始化。

3常量地址空间：常量地址的数据只能读不能写，常量地址空间的指针可以作为函数参数和函数内声明的变量，程序作用域中的变量和内核函数作用域中的变量可以在常量地址空间分配，这些变量都要求定义时直接初始化，

4私有地址空间：内核函数中未使用地址空间修饰符的变量，非内核函数中声明的所有变量，以及函数参数都在私有地址空间，

5通用地址空间：全局、局部和私有地址空间是通用地址空间的子集，指向这三个地址空间的指针可以隐式第转换为指向为命名的通用地址空间指针，但是通用地址空间指针必须得强式转换，
值得注意一点，如果一个内核函数调用另外一个内核函数，那么被调用的内核函数作为一个普通的函数调用
kernel修饰符可以与关键字__attribute__联用来声明一下关于内核的额外信息
__attribute__((vec_type_hint(<type>)))可以给编译器提示kernel的计算宽度
__attribute__((work_group_size_hint(x,y,z)))可以给编译器提示可能使用的工作组大小，__attribute__((reqd_work_group_size(x,y,z)))用来强制制定工作组的大小

访问修饰符用于指定图像类型参数的类型，为read_only,read_write,write_only三种，意义不言而喻
标量数据类型与一般语言相差不大，就是有几个地方不一样，half为16位浮点数，size_t为32位或者64位，同理还有ptrdiff_t,intptr_t,uintptr_t这些
双精度不一定存在，如果存在，在其中加上#progma OPENCL EXTENSION cl_khr_fp64:enabel即可

矢量型数据为一般数据加上数据n即可，比如charn，ucharn等等，同时要注意数据的对齐，方便一次读出，矢量初始化有如下形式：
float4 Datavec=（float4）（1.0,1.0,1.0,1.0）
float4 Datavec=（float4）（1.0）
float2 DataA=（float2） （1.0,1.0)
float2 DataB= (float2)  (1.0,1.0)
float4 Datavec=(DataA,DataB)
同时关于索引有数值索引和字符索引，这里太过细节，就不多讲了

